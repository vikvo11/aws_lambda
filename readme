

{{
Let’s have AWS S3 Bucket, that requires IAM authentication on all requests.
We would like to implement a system that records size of uploaded files to the S3 bucket per AWS principal used during upload. The sizes should be added to AWS CloudWatch metrics.

Example:

IAM user Peter uploads file with size 10Kb … then metric /CodingTest/Peter will contain point with value 10Kb.
IAM user Viktor uploads file with size 20Kb … then metric /CodingTest/Viktor will contain point with value 20Kb.
}}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


Hey
Please see steps below:

1) Create IAM Users
2) Create S3 bucket

3) Give permission to work with S3 bucket in IAM policy and/or in S3 bucket policy
for example
-Read only for all S3 in IAM:
>>"s3:Get*","s3:List*"
-Modify rights for certain users in s3 bucket policy:
>>"s3:DeleteObject","s3:PutObject"

-But we can also use only IAM or only s3 bucket policy

4) Create Lambda function + grant permision of Lambda role for "iam:GetAccountAuthorizationDetails" + "cloudwatch:PutMetricData"
5) Add Lambda trigпer> Event type: s3:ObjectCreated:*


##############################################


def lambda_handler(event, context):
    message = 'Hello {} {}!'.format(event['first_name'], event['last_name'])  
    return { 
        'message' : message
    }
    
#####

import os
import json
        
def lambda_handler(event, context):
    json_region = os.environ['AWS_REGION']
    return {
        "statusCode": 200,
        "headers": {
            "Content-Type": "application/json"
        },
        "body": json.dumps({
            "Region ": json_region
        })
    }
    
    ###
    
    import logging

logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    ...
    result = None
    action = event.get('action')
    if action == 'increment':
        result = event.get('number', 0) + 1
        logger.info('Calculated result of %s', result)
    else:
        logger.error("%s is not a valid action.", action)

    response = {'result': result}
    return response
    
    ####
